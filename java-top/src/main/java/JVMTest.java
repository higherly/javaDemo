/*https://www.cnblogs.com/wangjzh/p/5258254.html
JVM就是一个执行.class字节码文件的地方
* 1.谈谈JVM的内存结构和和内存分配？
*       JVM初始运行的时候都会分配好Method Area（方法区）和Heap（堆），
*       而JVM 每遇到一个线程，就为其分配一个Program Counter Register（程序计数器）, VM Stack（虚拟机栈）和Native Method Stack （本地方法栈），
*       当线程终止时，三者（虚拟机栈，本地方法栈和程序计数器）所占用的内存空间也会被释放掉。
*       这也是为什么我把内存区域分为线程共享和非线程共享的原因，非线程共享的那三个区域的生命周期与所属线程相同，
*       而线程共享的区域与JAVA程序运行的生命周期相同，
*       所以这也是系统垃圾回收的场所只发生在线程共享的区域（实际上对大部分虚拟机来说知发生在Heap上）的原因。
*       程序计数器:当前线程执行的字节码的位置指示器。分支、循环、跳转、异常处理和线程恢复等基础功能都需要依赖这个计算器来完成.
*       局部变量保存在 VM STACK;（实际上是简单类型（int,byte,short 等）保存在Stack中，对象类型在Stack中保存地址，在Heap 中保存对象实例）
*       方法区内部有一个非常重要的区域，叫做运行时常量池,:包含常量池,静态变量等,
* 2.java中的引用类型有哪些？
* */
public class JVMTest {
}
